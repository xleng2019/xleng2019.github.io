<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Nessus全版本破解安装</title>
    <url>/2021/11/24/nessus/</url>
    <content><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>最近要对内网服务器进行主机漏洞扫描,首选还是Nessus，网上也有很多师傅写过关于Nessus破解教程，破解过程基本都一样没什么特殊，本文重点还是写一些破解中发现的问题还有解决办法。相关安装破解过程简写。</p>
<span id="more"></span>
<h1 id="0x02-Nessus简介"><a href="#0x02-Nessus简介" class="headerlink" title="0x02 Nessus简介"></a>0x02 Nessus简介</h1><p>Nessus是目前全世界最多人使用的系统漏洞扫描与分析软件。总共有超过75,000个机构使用 Nessus 作为扫描该机构电脑系统的软件。Nessus号称是世界上最流行的漏洞扫描程序,通常包括成千上万的最新的漏洞，各种各样的扫描选项，及易于使用的图形界面和有效的报告。</p>
<h1 id="0x03-Nessus下载"><a href="#0x03-Nessus下载" class="headerlink" title="0x03 Nessus下载"></a>0x03 Nessus下载</h1><p>进入官网下载地址，根据自己的操作操作系统选择下载的版本。本文以windows系统为例。<br>·官网下载地址: <a href="https://www.tenable.com/downloads/nessus">https://www.tenable.com/downloads/nessus</a> Windows下载msi安装文件即可。</p>
<h1 id="0x04-Nessus安装"><a href="#0x04-Nessus安装" class="headerlink" title="0x04 Nessus安装"></a>0x04 Nessus安装</h1><p>下载好安装包后正常安装即可，中间会安装WinPcap。这里笔者遇到安装失败的问题，报错显示已有更新版安装。原因是因为之前安装namp时候，顺带安装了npcap，卸载后重装就好。<br>安装后进入web界面，选择 Managed Scanner，点击 continue再选择Tenable.sc，再次点击continue，创建账号密码。</p>
<h1 id="0x05-漏洞库下载"><a href="#0x05-漏洞库下载" class="headerlink" title="0x05 漏洞库下载"></a>0x05 漏洞库下载</h1><p>这里常规方式都是用邮箱注册一个Activation Code，然后使用命令nessuscli.exe fetch–challenge获取Challenge Code值，用这两个下载all-2.0.tar.gz漏洞库和license。但是如果使用这个方法的话会发现，在破解完成后plugin会清掉，导致破解失败或者16个IP限制依然存在，那么接下来主要介绍我自己破解成功的办法。</p>
<h1 id="0x06-Nessus破解"><a href="#0x06-Nessus破解" class="headerlink" title="0x06 Nessus破解"></a>0x06 Nessus破解</h1><p>能否破解成功，主要在于plugin_feed_info.inc文件（用来解除16个IP限制）和all-2.0.tar.gz（保证初始化完漏洞插件不会被清除），与Nessus版本没有太大关系，看有的师傅8.13版本也可以破解成功，截止当前，最新的是8.15还没测试。</p>
<h3 id="0x06-1-漏洞库"><a href="#0x06-1-漏洞库" class="headerlink" title="0x06.1 漏洞库"></a>0x06.1 漏洞库</h3><p>首先来说漏洞库的问题，首先漏洞库用常规方法获取的测试都不能成功，初始化完成后plugin目录都会被清空。因为都是免费版漏洞库，破解还是需要专业版的才可以正常使用。这里有的师傅介绍是用能否解压来判断漏洞库是否为专业版本，这点没测试，可自行尝试。看到还有的师傅说把插件目录复制出来，被清空后再粘贴回去，测试没有效果。。。大家可以再自己环境再试下。<br>我目前使用的漏洞库有需要的话评论，我放链接。</p>
<h3 id="0x06-2-配置文件"><a href="#0x06-2-配置文件" class="headerlink" title="0x06.2 配置文件"></a>0x06.2 配置文件</h3><p>接下来是配置文件，路径为:<br>\Nessus\nessus\plugin_feed_info.inc<br>\Nessus\nessus\plugins\plugin_feed_info.inc<br>文件内容如下:<br><font color="#00ffff">PLUGIN_SET = “202003232053”（根据自己漏洞库的版本号修改）;</font><br><font color="#00ffff">PLUGIN_FEED = “ProfessionalFeed (Direct)”;</font><br><font color="#00ffff">PLUGIN_FEED_TRANSPORT = “Tenable Network Security Lightning”;</font><br>没有的话自己创建就好。<br>这里也遇到个问题，就是当破解完成后，Nessus初始化会删除文件并创建一个空的文件，这就会导致初始化完成后登陆还是16个IP限制。这里的解决方法是，将这两个文件的权限都会设置为只读权限，这样文件会完整保留下来，亲测有效。<br><img src="/2021/11/24/nessus/nessus.png" alt="破解成功"><br>扫描也没啥问题。。。<br><img src="/2021/11/24/nessus/scan.png" alt="正常扫描"><br>最新版插件更新没问题<br><img src="/2021/11/24/nessus/plugin.jpg" alt="最新版插件"></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>snoopy命令日志审计工具安装配置</title>
    <url>/2022/06/10/snoopy/</url>
    <content><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>对于命令日志的审计，在各甲方公司来说都是会去做的，只是实现手段各不相同。主流的方案一般有history；定制 bash；snoopy；auditd；eBPF。之所以选择snoopy，其实主要看中的是它可以记录shell脚本内所执行的各项命令且不易被绕过，记录越详细对于我们审计、应急也有更多帮助。</p>
<span id="more"></span>
<h1 id="0x02-snoopy简介"><a href="#0x02-snoopy简介" class="headerlink" title="0x02 snoopy简介"></a>0x02 snoopy简介</h1><p>snoopy是一个开源的轻量级lib库, 可以记录系统中所有执行过的命令和参数。它是以预加载(preload)的方式实现历史命令的记录。 通过封装execv()和execve()系统调用，在发生这两个系统调用的时候记录下所需要的信息。</p>
<h1 id="0x03-snoopy安装"><a href="#0x03-snoopy安装" class="headerlink" title="0x03 snoopy安装"></a>0x03 snoopy安装</h1><p>官方地址：<a href="https://github.com/a2o/snoopy">https://github.com/a2o/snoopy</a></p>
<h3 id="0x03-1-源码安装"><a href="#0x03-1-源码安装" class="headerlink" title="0x03.1 源码安装"></a>0x03.1 源码安装</h3><p>1、使用wget <a href="https://github.com/a2o/snoopy/releases/download/snoopy-2.4.15/snoopy-2.4.15.tar.gz">https://github.com/a2o/snoopy/releases/download/snoopy-2.4.15/snoopy-2.4.15.tar.gz</a> –no-check-certificate<br><img src="/2022/06/10/snoopy/%E4%B8%8B%E8%BD%BD.png" alt="下载"><br>2、解压下载的压缩包并进入目录<br><img src="/2022/06/10/snoopy/%E8%A7%A3%E5%8E%8B.png" alt="解压"><br>3、依次执行./configure;make;make install<br><img src="/2022/06/10/snoopy/configure.png" alt="configure"><br><img src="/2022/06/10/snoopy/make.png" alt="make"><br><img src="/2022/06/10/snoopy/makeinstall.png" alt="makeinstall"></p>
<h3 id="0x03-2-命令一键安装"><a href="#0x03-2-命令一键安装" class="headerlink" title="0x03.2 命令一键安装"></a>0x03.2 命令一键安装</h3><p>执行命令 wget -q -O install-snoopy.sh <a href="https://github.com/a2o/snoopy/raw/install/install/install-snoopy.sh">https://github.com/a2o/snoopy/raw/install/install/install-snoopy.sh</a> &amp;&amp; chmod 755 install-snoopy.sh &amp;&amp; ./install-snoopy.sh stable<br><img src="/2022/06/10/snoopy/yijian.png" alt="一键安装"></p>
<h3 id="0x03-3-安装完成后，默认配置文件在路径：-usr-local-etc-snoopy-ini-日志路径：-var-log-secure"><a href="#0x03-3-安装完成后，默认配置文件在路径：-usr-local-etc-snoopy-ini-日志路径：-var-log-secure" class="headerlink" title="0x03.3 安装完成后，默认配置文件在路径：/usr/local/etc/snoopy.ini 日志路径：/var/log/secure"></a>0x03.3 安装完成后，默认配置文件在路径：/usr/local/etc/snoopy.ini 日志路径：/var/log/secure</h3><p><img src="/2022/06/10/snoopy/ini.png" alt="配置文件"><br><img src="/2022/06/10/snoopy/secure.png" alt="日志文件"><br>可以看到已经有日志被记录，安装成功。</p>
<p>#0x04 配置文件<br>这里只截取笔者自定义的部分<br>1、首先修改日志输出格式，这里我手动定义为json格式，方便日志后续打到日志中心。输出参数经过测试，最多仅能输出以下字段，各位也可自行尝试其他字段。<br><font color="#000066"><br>; Examples:<br>;message_format = “useless static log entry that gets logged on every program execution”<br>;message_format = “uid=%{uid}”   ; &lt;— this would only log uids who execute programs, nothing else;<br>;message_format = “uid=%{uid} tty=%{tty} cmdline=%{cmdline}”   ; &lt;— logs uid + tty + command that is executed<br>message_format = “{“datetime”:”%{datetime}”,”login”:”%{login}”,”username”:”%{username}”,”cmdline”:”%{cmdline}”,”cwd”:”%{cwd}”,”rpname”:”%{rpname}”,”pid”:”%{pid}”}”<br></font><br>2、过滤项配置，这个可以灵活定义。先开启记录日志的rpname字段，也就是进程名，后根据需要在过滤项中写入对应忽略日志的进程名即可，还有其他过滤日志方式，笔者用不到，各位可自行测试。<br><font color="#000066"><br>; Examples:<br>;filter_chain = “”<br>;filter_chain = “only_uid:0”<br>;filter_chain = “only_uid:10000”<br>;filter_chain = “exclude_uid:0”<br>filter_chain = “exclude_spawns_of:cron,crond,my_daemon”<br></font><br>3、日志输出路径配置。这里根据需要按照格式自行配置即可。<br><font color="#000066"><br>; Example:<br>;output = console<br>;output = devlog<br>;output = file:/var/log/snoopy.log<br>;output = socket:/var/run/socket-for-snoopy.sock<br>output = file:/var/log/snoopy<br></font><br>保存后，再次查看日志，发现已更新。<br><img src="/2022/06/10/snoopy/newlog.png" alt="日志文件"></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
</search>
